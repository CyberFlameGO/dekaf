buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10"
    }
}

plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


build.doFirst {
    def currentVersion = JavaVersion.current()
    if (currentVersion != java.sourceCompatibility) {
        throw new GradleException("Expected java version ${java.sourceCompatibility} but got version ${currentVersion}")
    }
}


def annotationsVersion   = '20.0.0'
def kotlinVersion        = '1.4.10'


def libAnnotations              = "org.jetbrains:annotations:$annotationsVersion"
def libKotlinStd                = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
def libKotlinReflect            = "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"


def outDir  = "$rootDir/out"
def jarsDir = "$rootDir/jars"


def groupKotlin = [
    project(':dekaf-main')
]


/// MODULES CONFIGURATION \\\

allprojects { project ->

    apply plugin: 'java-library'

    repositories {
        mavenCentral()
    }

    project.buildDir = new File(rootProject.projectDir, ".gradleTemp/" + project.name)
    //project.apply(plugin: 'idea')
    compileJava.options.encoding = 'UTF-8'
    
}

subprojects { project ->

    tasks.withType(Jar) {
        destinationDirectory = file(jarsDir)
    }

}

configure (groupKotlin) {

    apply plugin: 'kotlin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
    }
    
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            languageVersion = "1.4"
            apiVersion = "1.4"
            javaParameters = true
            suppressWarnings = true
            freeCompilerArgs += ['-Xinline-classes']
            freeCompilerArgs += ['-Xuse-experimental=kotlin.contracts.ExperimentalContracts']
            freeCompilerArgs += ['-Xuse-experimental=kotlin.ExperimentalUnsignedTypes']
        }
    }
    
}



/// MODULES \\\

project(':dekaf-inter') {

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            resources.srcDirs = []
        }
    }

    dependencies {
        implementation libAnnotations
    }

}


project(':dekaf-jdbc') {

    apply plugin: 'java-library'

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            resources.srcDirs = []
        }
    }

    dependencies {
        implementation project(':dekaf-inter')
        implementation libAnnotations
    }

}


project(':dekaf-main') {

    dependencies {
        implementation project(':dekaf-inter')
        implementation libKotlinStd
        implementation libKotlinReflect
    }

}

