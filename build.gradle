def kotlinVersion        = '1.3.21'
def annotationsVersion   = '15.0'

def log4jVersion         = '2.9.0'

def junitPlatformVersion = '1.4.0'
def junitJupiterVersion  = '5.4.0'
def assertJVersion       = '3.10.0'

def h2dbVersion          = '1.4.196'
def postgresVersion      = '9.4-1201-jdbc4'
def mysqlVersion         = '6.0.6'
def microsoftVersion     = '6.1.5.jre8-preview'
def jtdsVersion          = '1.2.8'


apply plugin: 'java'


buildscript {

    // unfortunately, we have to duplicate this two variables :(
    def kotlinVersion0        = '1.3.21'
    def junitPlatformVersion0 = '1.1.0'


    ext {
        kotlin_version = kotlinVersion0
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion0"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion0"
    }
}


allprojects { project ->
    project.buildDir = new File(rootProject.projectDir, ".gradleTemp/" + project.name)
    project.apply(plugin: 'idea')
    compileJava.options.encoding = 'UTF-8'
}



subprojects { project ->

    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'

    repositories {
        flatDir {
            mavenCentral()
            dirs ("$rootProject.projectDir/lib/pro", "$rootProject.projectDir/lib/test")
        }
    }

    sourceSets {
        test.java.srcDirs = []
        test.resources.srcDirs = []
    }

    /*
    processResources {
        //logger.warn("---- $project.projectDir")
        eachFile { if (it.path.endsWith(".sql")) it.path = "org/jetbrains/dekaf/${it.path}" }
        //eachFile { logger.warn("copying something from $it.sourcePath to $it.path") }
    }
    */

    tasks.withType(Jar) {
        destinationDir = file("$rootDir/out/jars")
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "${project.archivesBaseName}-tests"
        from sourceSets.test.output
    }

    artifacts {
        archives testJar
    }

}


configurations {
    testOutput.extendsFrom (testCompile)
}


def groupDekaf = [ project(':dekaf-base'),
                   project(':dekaf-jdbc'),
                   project(':dekaf-main'),
                   project(':dekaf-test-db') ]

def groupDemo =  [ project(':demo-on-java'),
                   project(':demo-on-kotlin') ]

def groupTesting = [ project(':ko-test-util'),
                     project(':expectation'),
                     project(':test-basic'),
                     project(':test-connection') ]

def allModules = groupDekaf + groupDemo + groupTesting

def kotlinModules = [ project(':dekaf-main'),
                      project(':dekaf-test-db'),
                      project(':demo-on-kotlin'),
                      project(':ko-test-util'),
                      project(':expectation'),
                      project(':test-basic'),
                      project(':test-connection') ]


configure (groupDekaf) {
    idea.module.name = "Dekaf.$it.name"
}

configure (groupDemo) {
    idea.module.name = "Demo.$it.name"
}

configure (groupTesting) {
    idea.module.name = "Testing.$it.name"
}



configure (kotlinModules) {

    apply plugin: 'kotlin'
    
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            languageVersion = "1.3"
            apiVersion = "1.3"
            javaParameters = true
            suppressWarnings = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            languageVersion = "1.3"
            apiVersion = "1.3"
            javaParameters = true
            suppressWarnings = true
        }
    }
    
}







def libAnnotations              = "org.jetbrains:annotations:$annotationsVersion"

def libKotlinStd                = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
def libKotlinReflect            = "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

def libJunitJupiter             = "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
def libJunitPlatformLauncher    = "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
def libAssertJ                  = "org.assertj:assertj-core:$assertJVersion"

def libH2                       = "com.h2database:h2:$h2dbVersion"



/// DEKAF-BASE \\\

project(':dekaf-base') {

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = ['tests']
            resources.srcDirs = []
        }
    }
    
    dependencies {
        compile libAnnotations
        testCompile libJunitJupiter
        testCompile libAssertJ
    }

    task jarTest (type: Jar, dependsOn: testClasses) {
        from sourceSets.test.output
        classifier = 'test'
    }
}



/// DEKAF-JDBC \\\

project(':dekaf-jdbc') {

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = ['manifest']
        }
        test {
            java.srcDirs = ['tests']
            resources.srcDirs = []
        }
    }

    dependencies {
        compile project(':dekaf-base')
        testCompile libJunitJupiter
        testCompile libAssertJ
        testRuntime libH2
    }

}



/// DEKAF-MAIN \\\

project(':dekaf-main') {

    apply plugin: 'kotlin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = ['tests']
            resources.srcDirs = ['tests-sql']
        }
    }

    dependencies {
        compile project(':dekaf-base')
        compile libKotlinStd
        compile libKotlinReflect
        testRuntime project(':dekaf-jdbc')
        testCompile project(':ko-test-util')
        testCompile project(':expectation')
        testCompile libKotlinStd
        testCompile libJunitJupiter
        testCompile libAssertJ
        testRuntime libH2
    }

}



/// DEKAF-TEST-DB \\\

project(':dekaf-test-db') {

    apply plugin: 'kotlin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = ['manifest', 'sql']
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = ['tests']
            resources.srcDirs = ['tests-sql']
        }
    }

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile libKotlinStd
        compile libKotlinReflect
        testRuntime project(':dekaf-jdbc')
        testCompile project(':ko-test-util')
        testCompile libKotlinStd
        testCompile libKotlinReflect
        testCompile libJunitJupiter
        testCompile libAssertJ
        testRuntime libH2
    }

}


/// DEMO ON JAVA \\\

project(':demo-on-java') {

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = ['manifest']
        }
        test {
            java.srcDirs = []
            resources.srcDirs = []
        }
    }

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        runtime project(':dekaf-jdbc')
        runtime libH2
    }

}


/// DEMO ON KOTLIN \\\

project(':demo-on-kotlin') {

    apply plugin: 'kotlin'
    
    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
    }
    
    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        runtime project(':dekaf-jdbc')
        compile libKotlinStd
        runtime libH2
    }

}


/// TEST UTILS \\\

project(':ko-test-util') {

    apply plugin: 'kotlin'
    
    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
    }

    dependencies {
        compile libKotlinStd
        compile libKotlinReflect
        compile libJunitJupiter
        compile libJunitPlatformLauncher
    }

}


/// TEST EXPECTATIONS \\\

project(':expectation') {

    apply plugin: 'kotlin'
    
    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = ['demo']
            resources.srcDirs = []
        }
    }

    dependencies {
        compile libKotlinStd
        compile libJunitJupiter
        runtime libKotlinReflect
        testCompile libJunitPlatformLauncher
    }

}





project(':test-basic') {

    apply plugin: 'kotlin'
    //apply plugin: 'org.junit.platform.gradle.plugin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = ['tests']
            resources.srcDirs = []
        }
    }
    
    dependencies {
        testCompile project(':dekaf-base')
        testRuntime project(':dekaf-jdbc')
        testCompile project(':dekaf-main')
        testRuntime project(':dekaf-test-db')
        testCompile project(':expectation')
        testRuntime project(':demo-on-java')
        testRuntime project(':demo-on-kotlin')
        testCompile project(':ko-test-util')
        testCompile libKotlinStd
        testCompile libKotlinReflect
        testCompile libJunitJupiter
        testCompile libJunitPlatformLauncher
        testCompile libAssertJ
        testRuntime libH2
    }

    def testJarsString = "dekaf-base-tests.jar dekaf-jdbc-tests.jar dekaf-main-tests.jar dekaf-test-db-tests.jar"

    testJar {
        manifest {
            attributes(
                    "Class-Path": testJarsString + ' ' + configurations.testRuntime.collect { it.getName() }.join(' '),
                    'Main-Class': 'org.jetbrains.dekaf.TestBasic'
            )
        }
    }

    /*
    junitPlatform {
        //platformVersion 1.0
        //logManager 'org.apache.logging.log4j.jul.LogManager'
        reportsDir file('build/reports')

        // enableStandardTestTask true
        // selectors (optional)

        filters {
            engines {
                include 'junit-jupiter'
                exclude 'junit-vintage'
            }
        }
    }
    */

}


project(':test-connection') {

    apply plugin: 'kotlin'
    //apply plugin: 'org.junit.platform.gradle.plugin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = ['tests']
            resources.srcDirs = []
        }
    }

    dependencies {
        testCompile project(':dekaf-base')
        testCompile project(':dekaf-jdbc')
        testCompile project(':dekaf-main')
        testCompile project(':dekaf-test-db')
        testCompile project(':ko-test-util')
        testCompile libKotlinStd
        testCompile libKotlinReflect
        testCompile libJunitJupiter
        testCompile libJunitPlatformLauncher
    }

    /*
    junitPlatform {
        //platformVersion 1.0
        //logManager 'org.apache.logging.log4j.jul.LogManager'
        reportsDir file('build/reports')

        // enableStandardTestTask true
        // selectors (optional)

        filters {
            engines {
                include 'junit-jupiter'
                exclude 'junit-vintage'
            }
        }
    }
    */
}




task jarsBuilt(type: Copy, dependsOn: build) {
    from "$rootDir/../out/jars"
    into "$rootDir/../int/jars"
    exclude {it.file.length() == 261}
}

task jarsDownloaded(type: Copy) {
    duplicatesStrategy 'exclude'
    //from configurations.testCompile
    //from configurations.testRuntime
    from allModules.collect { it.configurations.testRuntime }
    into "$rootDir/../int/jars"
}

task jars(dependsOn: [jarsBuilt,jarsDownloaded]) {
}

